<?php

namespace DoctrineORMModule\Proxy\__CG__\Account\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Account extends \Account\Entity\Account implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getAccountId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["accountId"];
        }
        $this->__load();
        return parent::getAccountId();
    }

    public function getStartWeek()
    {
        $this->__load();
        return parent::getStartWeek();
    }

    public function getAmount()
    {
        $this->__load();
        return parent::getAmount();
    }

    public function getPayments()
    {
        $this->__load();
        return parent::getPayments();
    }

    public function getNPayments()
    {
        $this->__load();
        return parent::getNPayments();
    }

    public function getClient()
    {
        $this->__load();
        return parent::getClient();
    }

    public function getNPaid()
    {
        $this->__load();
        return parent::getNPaid();
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function getTimeStamp()
    {
        $this->__load();
        return parent::getTimeStamp();
    }

    public function setStartWeek($sw)
    {
        $this->__load();
        return parent::setStartWeek($sw);
    }

    public function setAmount($newAmount)
    {
        $this->__load();
        return parent::setAmount($newAmount);
    }

    public function setPayments($p)
    {
        $this->__load();
        return parent::setPayments($p);
    }

    public function setNPayments($np)
    {
        $this->__load();
        return parent::setNPayments($np);
    }

    public function setClient($c)
    {
        $this->__load();
        return parent::setClient($c);
    }

    public function setNPaid($np)
    {
        $this->__load();
        return parent::setNPaid($np);
    }

    public function setStatus($s)
    {
        $this->__load();
        return parent::setStatus($s);
    }

    public function setTimeStamp()
    {
        $this->__load();
        return parent::setTimeStamp();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'accountId', 'startWeek', 'amount', 'nPayments', 'nPaid', 'status', 'timeStamp', 'payments', 'client');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}